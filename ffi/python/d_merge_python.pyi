# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import collections.abc
import enum
import typing

@typing.final
class Config:
    r"""
    A configuration structure used to specify various directories and a status report callback.
    
    The `Config` struct holds paths for input resources and output directories, along with optional
    settings for debugging and compatibility. It is used to control behavior during operations such as
    patching HKX templates, merging JSON data, and generating final outputs.
    """
    @property
    def resource_dir(self) -> builtins.str:
        r"""
        The directory containing the HKX templates you want to patch.
        
        Typically this is a directory like `assets/templates`. The actual patch target directory
        should be a subdirectory such as `assets/templates/meshes`.
        """
    @resource_dir.setter
    def resource_dir(self, value: builtins.str) -> None:
        r"""
        The directory containing the HKX templates you want to patch.
        
        Typically this is a directory like `assets/templates`. The actual patch target directory
        should be a subdirectory such as `assets/templates/meshes`.
        """
    @property
    def output_dir(self) -> builtins.str:
        r"""
        The directory where the output files will be saved.
        
        This directory will also contain `.debug` subdirectory if debug output is enabled.
        """
    @output_dir.setter
    def output_dir(self, value: builtins.str) -> None:
        r"""
        The directory where the output files will be saved.
        
        This directory will also contain `.debug` subdirectory if debug output is enabled.
        """
    @property
    def output_target(self) -> OutPutTarget:
        r"""
        Generation target
        """
    @output_target.setter
    def output_target(self, value: OutPutTarget) -> None:
        r"""
        Generation target
        """
    @property
    def hack_options(self) -> typing.Optional[HackOptions]:
        r"""
        Enables lenient parsing for known issues in unofficial or modded patches.
        
        This setting allows the parser to work around common community patch errors
        such as incorrect field names or missing values. Use with caution as it may
        mask actual data issues.
        """
    @hack_options.setter
    def hack_options(self, value: typing.Optional[HackOptions]) -> None:
        r"""
        Enables lenient parsing for known issues in unofficial or modded patches.
        
        This setting allows the parser to work around common community patch errors
        such as incorrect field names or missing values. Use with caution as it may
        mask actual data issues.
        """
    @property
    def debug(self) -> DebugOptions:
        r"""
        Options controlling the output of debug artifacts.
        """
    @debug.setter
    def debug(self, value: DebugOptions) -> None:
        r"""
        Options controlling the output of debug artifacts.
        """
    @property
    def skyrim_data_dir_glob(self) -> typing.Optional[builtins.str]:
        r"""
        Skyrim data directories glob (required **only when using FNIS**).
        
        This must include all directories containing `animations/<namespace>`, otherwise FNIS
        entries will not be detected and the process will fail.
        """
    @skyrim_data_dir_glob.setter
    def skyrim_data_dir_glob(self, value: typing.Optional[builtins.str]) -> None:
        r"""
        Skyrim data directories glob (required **only when using FNIS**).
        
        This must include all directories containing `animations/<namespace>`, otherwise FNIS
        entries will not be detected and the process will fail.
        """
    def __new__(cls, resource_dir: builtins.str, output_dir: builtins.str, output_target: OutPutTarget, cast_ragdoll_event: typing.Optional[builtins.bool], output_patch_json: builtins.bool, output_merged_json: builtins.bool, output_merged_xml: builtins.bool, skyrim_data_dir_glob: typing.Optional[builtins.str]) -> Config:
        r"""
        Create a new Config class.
        """

@typing.final
class DebugOptions:
    r"""
    A group of flags to enable debug output of intermediate files.
    """
    @property
    def output_patch_json(self) -> builtins.bool:
        r"""
        If true, outputs the raw patch JSON to the `.debug` subdirectory under `<output_dir>/.d_merge`.
        
        This includes:
        - `patch.json`: The raw parsed patch data.
          - For `One` patches, it reflects the result of priority-based overwriting.
          - For `Seq` patches, all entries are preserved in a vector (`Vec`) for later conflict resolution.
        """
    @output_patch_json.setter
    def output_patch_json(self, value: builtins.bool) -> None:
        r"""
        If true, outputs the raw patch JSON to the `.debug` subdirectory under `<output_dir>/.d_merge`.
        
        This includes:
        - `patch.json`: The raw parsed patch data.
          - For `One` patches, it reflects the result of priority-based overwriting.
          - For `Seq` patches, all entries are preserved in a vector (`Vec`) for later conflict resolution.
        """
    @property
    def output_merged_json(self) -> builtins.bool:
        r"""
        If true, outputs the merged JSON to the `.debug` subdirectory under `<output_dir>/.d_merge`.
        
        This represents the state of the data after all patches have been applied and
        conflicts resolved, but before converting to `.hkx` format.
        """
    @output_merged_json.setter
    def output_merged_json(self, value: builtins.bool) -> None:
        r"""
        If true, outputs the merged JSON to the `.debug` subdirectory under `<output_dir>/.d_merge`.
        
        This represents the state of the data after all patches have been applied and
        conflicts resolved, but before converting to `.hkx` format.
        """
    @property
    def output_merged_xml(self) -> builtins.bool:
        r"""
        If true, outputs the intermediate merged XML to the `.debug` subdirectory under `<output_dir>/.d_merge`.
        
        This is the final XML representation of the patched and merged data,
        just before conversion to the binary `.hkx` format.
        """
    @output_merged_xml.setter
    def output_merged_xml(self, value: builtins.bool) -> None:
        r"""
        If true, outputs the intermediate merged XML to the `.debug` subdirectory under `<output_dir>/.d_merge`.
        
        This is the final XML representation of the patched and merged data,
        just before conversion to the binary `.hkx` format.
        """

@typing.final
class DirEntry:
    r"""
    Represents a node in the directory structure.
    """
    @property
    def id(self) -> builtins.str:
        r"""
        Relative or absolute path
        """
    @property
    def label(self) -> builtins.str:
        r"""
        The name of the entry (file or directory).
        """
    @property
    def children(self) -> typing.Optional[builtins.list[DirEntry]]:
        r"""
        The sub-entries contained within this directory, if applicable.
        This will be `None` if the entry is a file.
        """

@typing.final
class HackOptions:
    r"""
    A collection of hack options that enable non-standard parsing behavior.
    
    These options exist to handle cases where game mods or other tools produce
    invalid or inconsistent data. Enabling these may allow parsing to succeed
    in otherwise broken scenarios, at the risk of hiding real errors.
    """
    @property
    def cast_ragdoll_event(self) -> builtins.bool:
        r"""
        Enables compatibility hacks for invalid fields in the `BSRagdollContactListenerModifier` class.
        
        This option activates targeted fixes for common field naming mistakes in patches:
        - Substitutes `event` with `contactEvent`
        - Substitutes `anotherBoneIndex` with `bones`
        """
    @cast_ragdoll_event.setter
    def cast_ragdoll_event(self, value: builtins.bool) -> None:
        r"""
        Enables compatibility hacks for invalid fields in the `BSRagdollContactListenerModifier` class.
        
        This option activates targeted fixes for common field naming mistakes in patches:
        - Substitutes `event` with `contactEvent`
        - Substitutes `anotherBoneIndex` with `bones`
        """

@typing.final
class ModInfo:
    r"""
    # Note
    - Intended `Nemesis_Engine/mods/<id>/info.ini`
    - `priority`: As with MO2, lower numbers indicate lower priority, higher numbers indicate higher priority.
    """
    @property
    def id(self) -> builtins.str:
        r"""
        Mod-specific dir name.
        """
    @property
    def name(self) -> builtins.str:
        r"""
        Mod name
        """
    @property
    def author(self) -> builtins.str:
        r"""
        Mod author
        """
    @property
    def site(self) -> builtins.str:
        r"""
        Mod download link
        """
    @property
    def mod_type(self) -> ModType:
        r"""
        Mod type. Nemesis, FNIS
        """

@typing.final
class PatchMaps:
    r"""
    Mod entries
    """
    @property
    def nemesis_entries(self) -> builtins.dict[builtins.str, builtins.int]:
        r"""
        Nemesis patch path
        - key: path until mod_code(e.g. `<skyrim_data_dir>/meshes/Nemesis_Engine/mod/slide`)
        - value: priority
        """
    @nemesis_entries.setter
    def nemesis_entries(self, value: builtins.dict[builtins.str, builtins.int]) -> None:
        r"""
        Nemesis patch path
        - key: path until mod_code(e.g. `<skyrim_data_dir>/meshes/Nemesis_Engine/mod/slide`)
        - value: priority
        """
    @property
    def fnis_entries(self) -> builtins.dict[builtins.str, builtins.int]:
        r"""
        FNIS patch path
        - key: FNIS namespace(e.g. `namespace` of `<skyrim_data_dir>/path/meshes/actors/character/animations/<namespace>`)
        - value: priority
        """
    @fnis_entries.setter
    def fnis_entries(self, value: builtins.dict[builtins.str, builtins.int]) -> None:
        r"""
        FNIS patch path
        - key: FNIS namespace(e.g. `namespace` of `<skyrim_data_dir>/path/meshes/actors/character/animations/<namespace>`)
        - value: priority
        """
    def __new__(cls) -> PatchMaps:
        r"""
        Create a new class.
        """

class PatchStatus:
    r"""
    Represents the status of a patching process.
    
    This struct is used to report the current state of the process. Depending on the `event`,
    `content` may contain progress information, and `err_msg` may contain an error message if the process failed.
    
    The backend emits these status values using `window.emit(...)` during various stages.
    - Mirrors Rust enum with serde(tag="type", content="content").
    """
    def __str__(self) -> builtins.str:
        r"""
        Returns a human-readable string representation of the status.
        """
    def __repr__(self) -> builtins.str:
        r"""
        Returns a developer-friendly string representation of the status.
        """
    @typing.final
    class GeneratingFnisPatches(PatchStatus):
        r"""
        Status when generating FNIS patches.
        """
        __match_args__ = ("index", "total",)
        @property
        def index(self) -> builtins.int:
            r"""
            0 based index
            """
        @property
        def total(self) -> builtins.int: ...
        def __new__(cls, index: builtins.int, total: builtins.int) -> PatchStatus.GeneratingFnisPatches: ...
    
    @typing.final
    class ReadingPatches(PatchStatus):
        r"""
        Status when reading patches.
        """
        __match_args__ = ("index", "total",)
        @property
        def index(self) -> builtins.int:
            r"""
            0 based index
            """
        @property
        def total(self) -> builtins.int: ...
        def __new__(cls, index: builtins.int, total: builtins.int) -> PatchStatus.ReadingPatches: ...
    
    @typing.final
    class ParsingPatches(PatchStatus):
        r"""
        Status when Parsing patches.
        """
        __match_args__ = ("index", "total",)
        @property
        def index(self) -> builtins.int:
            r"""
            0 based index
            """
        @property
        def total(self) -> builtins.int: ...
        def __new__(cls, index: builtins.int, total: builtins.int) -> PatchStatus.ParsingPatches: ...
    
    @typing.final
    class ApplyingPatches(PatchStatus):
        r"""
        Status when applying patches.
        """
        __match_args__ = ("index", "total",)
        @property
        def index(self) -> builtins.int:
            r"""
            0 based index
            """
        @property
        def total(self) -> builtins.int: ...
        def __new__(cls, index: builtins.int, total: builtins.int) -> PatchStatus.ApplyingPatches: ...
    
    @typing.final
    class GeneratingHkxFiles(PatchStatus):
        r"""
        Status when generating HKX files.
        """
        __match_args__ = ("index", "total",)
        @property
        def index(self) -> builtins.int:
            r"""
            0 based index
            """
        @property
        def total(self) -> builtins.int: ...
        def __new__(cls, index: builtins.int, total: builtins.int) -> PatchStatus.GeneratingHkxFiles: ...
    
    @typing.final
    class Done(PatchStatus):
        r"""
        Status when the process is completed.
        """
        __match_args__ = ()
        def __new__(cls) -> PatchStatus.Done: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...
    
    @typing.final
    class Error(PatchStatus):
        r"""
        Error occurred, then err msg
        """
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0: builtins.str) -> PatchStatus.Error: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...
    

@typing.final
class Payload:
    r"""
    Payload for progress reporting
    """
    @property
    def path_id(self) -> builtins.int:
        r"""
        Hashed identifier of the file path.
        
        Using a hash ensures that the frontend can track tasks reliably,
        even if items are removed or reordered.
        
        - conversion input path to `djb2` hashed -> id
        """
    @path_id.setter
    def path_id(self, value: builtins.int) -> None:
        r"""
        Hashed identifier of the file path.
        
        Using a hash ensures that the frontend can track tasks reliably,
        even if items are removed or reordered.
        
        - conversion input path to `djb2` hashed -> id
        """
    @property
    def status(self) -> SerdeHkxStatus:
        r"""
        Current progress status of this task.
        """
    @status.setter
    def status(self, value: SerdeHkxStatus) -> None:
        r"""
        Current progress status of this task.
        """

@typing.final
class ModType(enum.Enum):
    r"""
    Mod type. Nemesis, FNIS
    """
    Nemesis = ...
    r"""
    GUI developers must add the following to the paths array in `nemesis_merge::behavior_gen`.
    - `<skyrim data dir>/Nemesis_Engine/mod/aaaa`
    """
    Fnis = ...
    r"""
    GUI developers must add the following to the paths array in `nemesis_merge::behavior_gen`.
    - `<skyrim data dir>/meshes/actors/character/animations/<namespace>`
    """

@typing.final
class OutPutTarget(enum.Enum):
    r"""
    Behavior Output target
    """
    SkyrimSE = ...
    r"""
    Skyrim Legendary Edition
    """
    SkyrimLE = ...
    r"""
    Skyrim Special Edition
    """

@typing.final
class SerdeHkxStatus(enum.Enum):
    r"""
    Represents the progress status of a conversion task.
    
    The numeric representation (`u8`) is serialized and deserialized directly,
    which is convenient for frontend communication.
    """
    Pending = ...
    r"""
    Task is pending and has not started yet.: 0
    """
    Processing = ...
    r"""
    Task is currently being processed.: 1
    """
    Done = ...
    r"""
    Task completed successfully.: 2
    """
    Error = ...
    r"""
    Task encountered an error during processing.: 3
    """

def behavior_gen(patch_entries: PatchMaps, config: Config, status_fn: typing.Optional[collections.abc.Callable[[PatchStatus], None]]) -> typing.Awaitable[None]:
    r"""
    Generates Nemesis behaviors for given mod IDs using a configuration.
    
    - nemesis_paths: `e.g. ["../../dummy/Data/Nemesis_Engine/mod/aaaaa"]`
    - `config.resource_dir`: Path of the template from which the patch was applied.(e.g. `../templates/` => `../templates/meshes`)
    - `status_fn` - Optional thread_safe JS callback for patch status updates.
    
    # Errors
    Returns an error if file parsing, I/O operations, or JSON serialization fails.
    """

def change_log_level(level: typing.Literal["trace", "debug", "info", "warn", "error"]) -> None:
    r"""
    Changes the current logging level.
    
    # Errors
    If logger uninitialized.
    
    # Examples
    
    ```python
    from d_merge_python import change_log_level
    
    change_log_level("debug");
    ```
    
    # Note
    - If unknown log level. fallback to `error`.(And write log warn)
    """

def convert(inputs: typing.Sequence[builtins.str], output: typing.Optional[builtins.str], format: builtins.str, roots: typing.Optional[typing.Sequence[builtins.str]], progress: typing.Optional[collections.abc.Callable[[Payload], None]]) -> typing.Awaitable[None]:
    r"""
    Converts between HKX and XML (or other supported formats) asynchronously.
    - `inputs`: input paths
    - `output`: output path
    - `format`: "amd64" | "win32" | "xml" | "json". otherwise error.
    - `roots`: inputs multiple
    - `progress`: status report function
    
    # Errors
    - Failed to convert.
    - `FormatParse` - The provided output format string could not be parsed.
    """

def get_skyrim_data_dir(runtime: OutPutTarget) -> builtins.str:
    r"""
    Get the skyrim data directory.
    
    # Errors
    - When the string specified in runtime is not “SkyrimSE” or “SkyrimLE”
    - Returns an error if the Skyrim directory cannot be found from registry.
    """

def load_dir_node(dirs: typing.Sequence[builtins.str]) -> builtins.list[DirEntry]:
    r"""
    Loads a directory structure from the specified path, filtering by allowed extensions.
    
    # Errors
    Returns an error message if the directory cannot be loaded or if there are issues reading the path.
    """

def load_mods_info(glob: builtins.str, is_vfs: builtins.bool) -> builtins.list[ModInfo]:
    r"""
    Collect both Nemesis and FNIS mods into a single vector.
    
    # Errors
    Returns [`napi::Error`] if glob expansion fails or files cannot be read.
    """

def log_debug(msg: builtins.str) -> None:
    r"""
    Logs a message at the DEBUG level.
    
    # Examples
    
    ```python
    from d_merge_python import log_debug
    
    log_debug('This is a debug message');
    ```
    """

def log_error(msg: builtins.str) -> None:
    r"""
    Logs a message at the ERROR level.
    
    # Examples
    
    ```python
    from d_merge_python import log_error
    
    log_error('This is an error message');
    ```
    """

def log_info(msg: builtins.str) -> None:
    r"""
    Logs a message at the INFO level.
    
    # Examples
    
    ```python
    from d_merge_python import log_info
    
    log_info('This is an info message');
    ```
    """

def log_trace(msg: builtins.str) -> None:
    r"""
    Logs a message at the TRACE level.
    
    # Examples
    
    ```python
    from d_merge_python import log_trace
    
    log_trace('This is a trace message');
    ```
    """

def log_warn(msg: builtins.str) -> None:
    r"""
    Logs a message at the WARN level.
    
    # Examples
    
    ```python
    from d_merge_python import log_warn
    
    log_warn('This is a warning message');
    ```
    """

def logger_init(log_dir: builtins.str, log_name: builtins.str) -> None:
    r"""
    Initializes the logger with a specified directory and log file name.
    
    # Errors
    An error occurs when initialization is attempted twice.
    
    # Examples
    
    ```python
    from d_merge_python import logger_init
    
    logger_init("./test/logs", "d_merge_python.log")
    ```
    """

